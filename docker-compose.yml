version: '3.8'

services:
  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    ports:
      # Maps the host port from .env to the container's internal port 80
      - "${UI_PORT}:80"
    depends_on:
      - api
    environment:
      # This URL points to the 'api' service name within Docker's network.
      # It's best to keep this hardcoded as it's internal to Docker.
      - VITE_API_URL=http://api:8080

  api:
      build:
        context: ./api
        dockerfile: Dockerfile
        args:
          - API_PORT=${API_PORT}  
      ports:
        - "${API_PORT}:${API_PORT}"
      depends_on:
        database:
          condition: service_healthy
      env_file:
        - ./.env
      environment:
        - SERVER_PORT=${API_PORT}
        - SPRING_DATASOURCE_URL=jdbc:postgresql://database:5432/${POSTGRES_DB}
        - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
        - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
        - SPRING_PROFILES_ACTIVE=docker
      volumes:
        - ./uploads:/app/uploads  

  database:
    image: postgres:16-alpine
    ports:
      # Maps the host port from .env to the container's internal port
      - "${DB_PORT}:5432"
    # This tells the postgres image to use these variables for setup
    env_file:
      - ./.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      # Command to check if the database is ready to accept connections
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
